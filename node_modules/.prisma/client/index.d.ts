
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model lists
 */

export type lists = {
  id: number
  user_id: number
  title: string
  default: boolean
  is_deleted: boolean
  created_at: Date
  updated_at: Date | null
}

/**
 * Model todos
 */

export type todos = {
  id: number
  list_id: number
  user_id: number
  is_deleted: boolean
  content: string
  created_at: Date
  updated_at: Date | null
}

/**
 * Model users
 */

export type users = {
  id: number
  email: string
  password: string
  created_at: Date
  updated_at: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Lists
 * const lists = await prisma.lists.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Lists
   * const lists = await prisma.lists.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>

      /**
   * `prisma.lists`: Exposes CRUD operations for the **lists** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lists
    * const lists = await prisma.lists.findMany()
    * ```
    */
  get lists(): Prisma.listsDelegate<GlobalReject>;

  /**
   * `prisma.todos`: Exposes CRUD operations for the **todos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Todos
    * const todos = await prisma.todos.findMany()
    * ```
    */
  get todos(): Prisma.todosDelegate<GlobalReject>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.20.0
   * Query Engine version: 60ba6551f29b17d7d6ce479e5733c70d9c00860e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    lists: 'lists',
    todos: 'todos',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model lists
   */


  export type AggregateLists = {
    count: ListsCountAggregateOutputType | null
    avg: ListsAvgAggregateOutputType | null
    sum: ListsSumAggregateOutputType | null
    min: ListsMinAggregateOutputType | null
    max: ListsMaxAggregateOutputType | null
  }

  export type ListsAvgAggregateOutputType = {
    id: number
    user_id: number
  }

  export type ListsSumAggregateOutputType = {
    id: number
    user_id: number
  }

  export type ListsMinAggregateOutputType = {
    id: number
    user_id: number
    title: string | null
    default: boolean | null
    is_deleted: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ListsMaxAggregateOutputType = {
    id: number
    user_id: number
    title: string | null
    default: boolean | null
    is_deleted: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ListsCountAggregateOutputType = {
    id: number
    user_id: number
    title: number | null
    default: number | null
    is_deleted: number | null
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type ListsAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type ListsSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type ListsMinAggregateInputType = {
    id?: true
    user_id?: true
    title?: true
    default?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
  }

  export type ListsMaxAggregateInputType = {
    id?: true
    user_id?: true
    title?: true
    default?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
  }

  export type ListsCountAggregateInputType = {
    id?: true
    user_id?: true
    title?: true
    default?: true
    is_deleted?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ListsAggregateArgs = {
    /**
     * Filter which lists to aggregate.
    **/
    where?: listsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
    **/
    orderBy?: Enumerable<listsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: listsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lists
    **/
    count?: true | ListsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ListsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ListsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ListsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ListsMaxAggregateInputType
  }

  export type GetListsAggregateType<T extends ListsAggregateArgs> = {
    [P in keyof T & keyof AggregateLists]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLists[P]>
      : GetScalarType<T[P], AggregateLists[P]>
  }


    
    
  export type ListsGroupByArgs = {
    where?: listsWhereInput
    orderBy?: Enumerable<listsOrderByInput>
    by: Array<ListsScalarFieldEnum>
    having?: listsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: ListsCountAggregateInputType | true
    avg?: ListsAvgAggregateInputType
    sum?: ListsSumAggregateInputType
    min?: ListsMinAggregateInputType
    max?: ListsMaxAggregateInputType
  }


  export type ListsGroupByOutputType = {
    id: number
    user_id: number
    title: string
    default: boolean
    is_deleted: boolean
    created_at: Date
    updated_at: Date | null
    count: ListsCountAggregateOutputType | null
    avg: ListsAvgAggregateOutputType | null
    sum: ListsSumAggregateOutputType | null
    min: ListsMinAggregateOutputType | null
    max: ListsMaxAggregateOutputType | null
  }

  type GetListsGroupByPayload<T extends ListsGroupByArgs> = Promise<Array<
    PickArray<ListsGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof ListsGroupByOutputType))]: GetScalarType<T[P], ListsGroupByOutputType[P]>
    }
  >>
    

  export type listsSelect = {
    id?: boolean
    user_id?: boolean
    title?: boolean
    default?: boolean
    is_deleted?: boolean
    created_at?: boolean
    updated_at?: boolean
    users?: boolean | usersArgs
    todos?: boolean | todosFindManyArgs
  }

  export type listsInclude = {
    users?: boolean | usersArgs
    todos?: boolean | todosFindManyArgs
  }

  export type listsGetPayload<
    S extends boolean | null | undefined | listsArgs,
    U = keyof S
      > = S extends true
        ? lists
    : S extends undefined
    ? never
    : S extends listsArgs | listsFindManyArgs
    ?'include' extends U
    ? lists  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? usersGetPayload<S['include'][P]> :
        P extends 'todos'
        ? Array < todosGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof lists ?lists [P]
  : 
          P extends 'users'
        ? usersGetPayload<S['select'][P]> :
        P extends 'todos'
        ? Array < todosGetPayload<S['select'][P]>>  : never
  } 
    : lists
  : lists


  type listsCountArgs = Merge<
    Omit<listsFindManyArgs, 'select' | 'include'> & {
      select?: ListsCountAggregateInputType | true
    }
  >

  export interface listsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Lists that matches the filter.
     * @param {listsFindUniqueArgs} args - Arguments to find a Lists
     * @example
     * // Get one Lists
     * const lists = await prisma.lists.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends listsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, listsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'lists'> extends True ? CheckSelect<T, Prisma__listsClient<lists>, Prisma__listsClient<listsGetPayload<T>>> : CheckSelect<T, Prisma__listsClient<lists | null >, Prisma__listsClient<listsGetPayload<T> | null >>

    /**
     * Find the first Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listsFindFirstArgs} args - Arguments to find a Lists
     * @example
     * // Get one Lists
     * const lists = await prisma.lists.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends listsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, listsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'lists'> extends True ? CheckSelect<T, Prisma__listsClient<lists>, Prisma__listsClient<listsGetPayload<T>>> : CheckSelect<T, Prisma__listsClient<lists | null >, Prisma__listsClient<listsGetPayload<T> | null >>

    /**
     * Find zero or more Lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lists
     * const lists = await prisma.lists.findMany()
     * 
     * // Get first 10 Lists
     * const lists = await prisma.lists.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const listsWithIdOnly = await prisma.lists.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends listsFindManyArgs>(
      args?: SelectSubset<T, listsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<lists>>, PrismaPromise<Array<listsGetPayload<T>>>>

    /**
     * Create a Lists.
     * @param {listsCreateArgs} args - Arguments to create a Lists.
     * @example
     * // Create one Lists
     * const Lists = await prisma.lists.create({
     *   data: {
     *     // ... data to create a Lists
     *   }
     * })
     * 
    **/
    create<T extends listsCreateArgs>(
      args: SelectSubset<T, listsCreateArgs>
    ): CheckSelect<T, Prisma__listsClient<lists>, Prisma__listsClient<listsGetPayload<T>>>

    /**
     * Create many Lists.
     *     @param {listsCreateManyArgs} args - Arguments to create many Lists.
     *     @example
     *     // Create many Lists
     *     const lists = await prisma.lists.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends listsCreateManyArgs>(
      args?: SelectSubset<T, listsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Lists.
     * @param {listsDeleteArgs} args - Arguments to delete one Lists.
     * @example
     * // Delete one Lists
     * const Lists = await prisma.lists.delete({
     *   where: {
     *     // ... filter to delete one Lists
     *   }
     * })
     * 
    **/
    delete<T extends listsDeleteArgs>(
      args: SelectSubset<T, listsDeleteArgs>
    ): CheckSelect<T, Prisma__listsClient<lists>, Prisma__listsClient<listsGetPayload<T>>>

    /**
     * Update one Lists.
     * @param {listsUpdateArgs} args - Arguments to update one Lists.
     * @example
     * // Update one Lists
     * const lists = await prisma.lists.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends listsUpdateArgs>(
      args: SelectSubset<T, listsUpdateArgs>
    ): CheckSelect<T, Prisma__listsClient<lists>, Prisma__listsClient<listsGetPayload<T>>>

    /**
     * Delete zero or more Lists.
     * @param {listsDeleteManyArgs} args - Arguments to filter Lists to delete.
     * @example
     * // Delete a few Lists
     * const { count } = await prisma.lists.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends listsDeleteManyArgs>(
      args?: SelectSubset<T, listsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lists
     * const lists = await prisma.lists.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends listsUpdateManyArgs>(
      args: SelectSubset<T, listsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Lists.
     * @param {listsUpsertArgs} args - Arguments to update or create a Lists.
     * @example
     * // Update or create a Lists
     * const lists = await prisma.lists.upsert({
     *   create: {
     *     // ... data to create a Lists
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lists we want to update
     *   }
     * })
    **/
    upsert<T extends listsUpsertArgs>(
      args: SelectSubset<T, listsUpsertArgs>
    ): CheckSelect<T, Prisma__listsClient<lists>, Prisma__listsClient<listsGetPayload<T>>>

    /**
     * Count the number of Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {listsCountArgs} args - Arguments to filter Lists to count.
     * @example
     * // Count the number of Lists
     * const count = await prisma.lists.count({
     *   where: {
     *     // ... the filter for the Lists we want to count
     *   }
     * })
    **/
    count<T extends listsCountArgs>(
      args?: Subset<T, listsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ListsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ListsAggregateArgs>(args: Subset<T, ListsAggregateArgs>): PrismaPromise<GetListsAggregateType<T>>

    /**
     * Group by Lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ListsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ListsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ListsGroupByArgs['orderBy'] }
        : { orderBy?: ListsGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ListsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetListsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for lists.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__listsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    todos<T extends todosFindManyArgs = {}>(args?: Subset<T, todosFindManyArgs>): CheckSelect<T, PrismaPromise<Array<todos>>, PrismaPromise<Array<todosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * lists findUnique
   */
  export type listsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
    /**
     * Throw an Error if a lists can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which lists to fetch.
    **/
    where: listsWhereUniqueInput
  }


  /**
   * lists findFirst
   */
  export type listsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
    /**
     * Throw an Error if a lists can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which lists to fetch.
    **/
    where?: listsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
    **/
    orderBy?: Enumerable<listsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lists.
    **/
    cursor?: listsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lists.
    **/
    distinct?: Enumerable<ListsScalarFieldEnum>
  }


  /**
   * lists findMany
   */
  export type listsFindManyArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
    /**
     * Filter, which lists to fetch.
    **/
    where?: listsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lists to fetch.
    **/
    orderBy?: Enumerable<listsOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lists.
    **/
    cursor?: listsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lists from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lists.
    **/
    skip?: number
    distinct?: Enumerable<ListsScalarFieldEnum>
  }


  /**
   * lists create
   */
  export type listsCreateArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
    /**
     * The data needed to create a lists.
    **/
    data: XOR<listsCreateInput, listsUncheckedCreateInput>
  }


  /**
   * lists createMany
   */
  export type listsCreateManyArgs = {
    data: Enumerable<listsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * lists update
   */
  export type listsUpdateArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
    /**
     * The data needed to update a lists.
    **/
    data: XOR<listsUpdateInput, listsUncheckedUpdateInput>
    /**
     * Choose, which lists to update.
    **/
    where: listsWhereUniqueInput
  }


  /**
   * lists updateMany
   */
  export type listsUpdateManyArgs = {
    data: XOR<listsUpdateManyMutationInput, listsUncheckedUpdateManyInput>
    where?: listsWhereInput
  }


  /**
   * lists upsert
   */
  export type listsUpsertArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
    /**
     * The filter to search for the lists to update in case it exists.
    **/
    where: listsWhereUniqueInput
    /**
     * In case the lists found by the `where` argument doesn't exist, create a new lists with this data.
    **/
    create: XOR<listsCreateInput, listsUncheckedCreateInput>
    /**
     * In case the lists was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<listsUpdateInput, listsUncheckedUpdateInput>
  }


  /**
   * lists delete
   */
  export type listsDeleteArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
    /**
     * Filter which lists to delete.
    **/
    where: listsWhereUniqueInput
  }


  /**
   * lists deleteMany
   */
  export type listsDeleteManyArgs = {
    where?: listsWhereInput
  }


  /**
   * lists without action
   */
  export type listsArgs = {
    /**
     * Select specific fields to fetch from the lists
    **/
    select?: listsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: listsInclude | null
  }



  /**
   * Model todos
   */


  export type AggregateTodos = {
    count: TodosCountAggregateOutputType | null
    avg: TodosAvgAggregateOutputType | null
    sum: TodosSumAggregateOutputType | null
    min: TodosMinAggregateOutputType | null
    max: TodosMaxAggregateOutputType | null
  }

  export type TodosAvgAggregateOutputType = {
    id: number
    list_id: number
    user_id: number
  }

  export type TodosSumAggregateOutputType = {
    id: number
    list_id: number
    user_id: number
  }

  export type TodosMinAggregateOutputType = {
    id: number
    list_id: number
    user_id: number
    is_deleted: boolean | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TodosMaxAggregateOutputType = {
    id: number
    list_id: number
    user_id: number
    is_deleted: boolean | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TodosCountAggregateOutputType = {
    id: number
    list_id: number
    user_id: number
    is_deleted: number | null
    content: number | null
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type TodosAvgAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
  }

  export type TodosSumAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
  }

  export type TodosMinAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
    is_deleted?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type TodosMaxAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
    is_deleted?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type TodosCountAggregateInputType = {
    id?: true
    list_id?: true
    user_id?: true
    is_deleted?: true
    content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TodosAggregateArgs = {
    /**
     * Filter which todos to aggregate.
    **/
    where?: todosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of todos to fetch.
    **/
    orderBy?: Enumerable<todosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: todosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` todos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` todos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned todos
    **/
    count?: true | TodosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: TodosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: TodosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TodosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TodosMaxAggregateInputType
  }

  export type GetTodosAggregateType<T extends TodosAggregateArgs> = {
    [P in keyof T & keyof AggregateTodos]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodos[P]>
      : GetScalarType<T[P], AggregateTodos[P]>
  }


    
    
  export type TodosGroupByArgs = {
    where?: todosWhereInput
    orderBy?: Enumerable<todosOrderByInput>
    by: Array<TodosScalarFieldEnum>
    having?: todosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: TodosCountAggregateInputType | true
    avg?: TodosAvgAggregateInputType
    sum?: TodosSumAggregateInputType
    min?: TodosMinAggregateInputType
    max?: TodosMaxAggregateInputType
  }


  export type TodosGroupByOutputType = {
    id: number
    list_id: number
    user_id: number
    is_deleted: boolean
    content: string
    created_at: Date
    updated_at: Date | null
    count: TodosCountAggregateOutputType | null
    avg: TodosAvgAggregateOutputType | null
    sum: TodosSumAggregateOutputType | null
    min: TodosMinAggregateOutputType | null
    max: TodosMaxAggregateOutputType | null
  }

  type GetTodosGroupByPayload<T extends TodosGroupByArgs> = Promise<Array<
    PickArray<TodosGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof TodosGroupByOutputType))]: GetScalarType<T[P], TodosGroupByOutputType[P]>
    }
  >>
    

  export type todosSelect = {
    id?: boolean
    list_id?: boolean
    user_id?: boolean
    is_deleted?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    lists?: boolean | listsArgs
    users?: boolean | usersArgs
  }

  export type todosInclude = {
    lists?: boolean | listsArgs
    users?: boolean | usersArgs
  }

  export type todosGetPayload<
    S extends boolean | null | undefined | todosArgs,
    U = keyof S
      > = S extends true
        ? todos
    : S extends undefined
    ? never
    : S extends todosArgs | todosFindManyArgs
    ?'include' extends U
    ? todos  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'lists'
        ? listsGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof todos ?todos [P]
  : 
          P extends 'lists'
        ? listsGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : todos
  : todos


  type todosCountArgs = Merge<
    Omit<todosFindManyArgs, 'select' | 'include'> & {
      select?: TodosCountAggregateInputType | true
    }
  >

  export interface todosDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Todos that matches the filter.
     * @param {todosFindUniqueArgs} args - Arguments to find a Todos
     * @example
     * // Get one Todos
     * const todos = await prisma.todos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends todosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, todosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'todos'> extends True ? CheckSelect<T, Prisma__todosClient<todos>, Prisma__todosClient<todosGetPayload<T>>> : CheckSelect<T, Prisma__todosClient<todos | null >, Prisma__todosClient<todosGetPayload<T> | null >>

    /**
     * Find the first Todos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {todosFindFirstArgs} args - Arguments to find a Todos
     * @example
     * // Get one Todos
     * const todos = await prisma.todos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends todosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, todosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'todos'> extends True ? CheckSelect<T, Prisma__todosClient<todos>, Prisma__todosClient<todosGetPayload<T>>> : CheckSelect<T, Prisma__todosClient<todos | null >, Prisma__todosClient<todosGetPayload<T> | null >>

    /**
     * Find zero or more Todos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {todosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Todos
     * const todos = await prisma.todos.findMany()
     * 
     * // Get first 10 Todos
     * const todos = await prisma.todos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todosWithIdOnly = await prisma.todos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends todosFindManyArgs>(
      args?: SelectSubset<T, todosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<todos>>, PrismaPromise<Array<todosGetPayload<T>>>>

    /**
     * Create a Todos.
     * @param {todosCreateArgs} args - Arguments to create a Todos.
     * @example
     * // Create one Todos
     * const Todos = await prisma.todos.create({
     *   data: {
     *     // ... data to create a Todos
     *   }
     * })
     * 
    **/
    create<T extends todosCreateArgs>(
      args: SelectSubset<T, todosCreateArgs>
    ): CheckSelect<T, Prisma__todosClient<todos>, Prisma__todosClient<todosGetPayload<T>>>

    /**
     * Create many Todos.
     *     @param {todosCreateManyArgs} args - Arguments to create many Todos.
     *     @example
     *     // Create many Todos
     *     const todos = await prisma.todos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends todosCreateManyArgs>(
      args?: SelectSubset<T, todosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Todos.
     * @param {todosDeleteArgs} args - Arguments to delete one Todos.
     * @example
     * // Delete one Todos
     * const Todos = await prisma.todos.delete({
     *   where: {
     *     // ... filter to delete one Todos
     *   }
     * })
     * 
    **/
    delete<T extends todosDeleteArgs>(
      args: SelectSubset<T, todosDeleteArgs>
    ): CheckSelect<T, Prisma__todosClient<todos>, Prisma__todosClient<todosGetPayload<T>>>

    /**
     * Update one Todos.
     * @param {todosUpdateArgs} args - Arguments to update one Todos.
     * @example
     * // Update one Todos
     * const todos = await prisma.todos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends todosUpdateArgs>(
      args: SelectSubset<T, todosUpdateArgs>
    ): CheckSelect<T, Prisma__todosClient<todos>, Prisma__todosClient<todosGetPayload<T>>>

    /**
     * Delete zero or more Todos.
     * @param {todosDeleteManyArgs} args - Arguments to filter Todos to delete.
     * @example
     * // Delete a few Todos
     * const { count } = await prisma.todos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends todosDeleteManyArgs>(
      args?: SelectSubset<T, todosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {todosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Todos
     * const todos = await prisma.todos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends todosUpdateManyArgs>(
      args: SelectSubset<T, todosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Todos.
     * @param {todosUpsertArgs} args - Arguments to update or create a Todos.
     * @example
     * // Update or create a Todos
     * const todos = await prisma.todos.upsert({
     *   create: {
     *     // ... data to create a Todos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Todos we want to update
     *   }
     * })
    **/
    upsert<T extends todosUpsertArgs>(
      args: SelectSubset<T, todosUpsertArgs>
    ): CheckSelect<T, Prisma__todosClient<todos>, Prisma__todosClient<todosGetPayload<T>>>

    /**
     * Count the number of Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {todosCountArgs} args - Arguments to filter Todos to count.
     * @example
     * // Count the number of Todos
     * const count = await prisma.todos.count({
     *   where: {
     *     // ... the filter for the Todos we want to count
     *   }
     * })
    **/
    count<T extends todosCountArgs>(
      args?: Subset<T, todosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodosAggregateArgs>(args: Subset<T, TodosAggregateArgs>): PrismaPromise<GetTodosAggregateType<T>>

    /**
     * Group by Todos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodosGroupByArgs['orderBy'] }
        : { orderBy?: TodosGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodosGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for todos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__todosClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    lists<T extends listsArgs = {}>(args?: Subset<T, listsArgs>): CheckSelect<T, Prisma__listsClient<lists | null >, Prisma__listsClient<listsGetPayload<T> | null >>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * todos findUnique
   */
  export type todosFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
    /**
     * Throw an Error if a todos can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which todos to fetch.
    **/
    where: todosWhereUniqueInput
  }


  /**
   * todos findFirst
   */
  export type todosFindFirstArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
    /**
     * Throw an Error if a todos can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which todos to fetch.
    **/
    where?: todosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of todos to fetch.
    **/
    orderBy?: Enumerable<todosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for todos.
    **/
    cursor?: todosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` todos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` todos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of todos.
    **/
    distinct?: Enumerable<TodosScalarFieldEnum>
  }


  /**
   * todos findMany
   */
  export type todosFindManyArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
    /**
     * Filter, which todos to fetch.
    **/
    where?: todosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of todos to fetch.
    **/
    orderBy?: Enumerable<todosOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing todos.
    **/
    cursor?: todosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` todos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` todos.
    **/
    skip?: number
    distinct?: Enumerable<TodosScalarFieldEnum>
  }


  /**
   * todos create
   */
  export type todosCreateArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
    /**
     * The data needed to create a todos.
    **/
    data: XOR<todosCreateInput, todosUncheckedCreateInput>
  }


  /**
   * todos createMany
   */
  export type todosCreateManyArgs = {
    data: Enumerable<todosCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * todos update
   */
  export type todosUpdateArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
    /**
     * The data needed to update a todos.
    **/
    data: XOR<todosUpdateInput, todosUncheckedUpdateInput>
    /**
     * Choose, which todos to update.
    **/
    where: todosWhereUniqueInput
  }


  /**
   * todos updateMany
   */
  export type todosUpdateManyArgs = {
    data: XOR<todosUpdateManyMutationInput, todosUncheckedUpdateManyInput>
    where?: todosWhereInput
  }


  /**
   * todos upsert
   */
  export type todosUpsertArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
    /**
     * The filter to search for the todos to update in case it exists.
    **/
    where: todosWhereUniqueInput
    /**
     * In case the todos found by the `where` argument doesn't exist, create a new todos with this data.
    **/
    create: XOR<todosCreateInput, todosUncheckedCreateInput>
    /**
     * In case the todos was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<todosUpdateInput, todosUncheckedUpdateInput>
  }


  /**
   * todos delete
   */
  export type todosDeleteArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
    /**
     * Filter which todos to delete.
    **/
    where: todosWhereUniqueInput
  }


  /**
   * todos deleteMany
   */
  export type todosDeleteManyArgs = {
    where?: todosWhereInput
  }


  /**
   * todos without action
   */
  export type todosArgs = {
    /**
     * Select specific fields to fetch from the todos
    **/
    select?: todosSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: todosInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    count: UsersCountAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number
  }

  export type UsersSumAggregateOutputType = {
    id: number
  }

  export type UsersMinAggregateOutputType = {
    id: number
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number
    email: string | null
    password: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number | null
    password: number | null
    created_at: number | null
    updated_at: number | null
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
    [P in keyof T & keyof AggregateUsers]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }


    
    
  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    count?: UsersCountAggregateInputType | true
    avg?: UsersAvgAggregateInputType
    sum?: UsersSumAggregateInputType
    min?: UsersMinAggregateInputType
    max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    created_at: Date
    updated_at: Date | null
    count: UsersCountAggregateOutputType | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Promise<Array<
    PickArray<UsersGroupByOutputType, T['by']> & {
      [P in ((keyof T) & (keyof UsersGroupByOutputType))]: GetScalarType<T[P], UsersGroupByOutputType[P]>
    }
  >>
    

  export type usersSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    created_at?: boolean
    updated_at?: boolean
    lists?: boolean | listsFindManyArgs
    todos?: boolean | todosFindManyArgs
  }

  export type usersInclude = {
    lists?: boolean | listsFindManyArgs
    todos?: boolean | todosFindManyArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | usersFindManyArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'lists'
        ? Array < listsGetPayload<S['include'][P]>>  :
        P extends 'todos'
        ? Array < todosGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'lists'
        ? Array < listsGetPayload<S['select'][P]>>  :
        P extends 'todos'
        ? Array < todosGetPayload<S['select'][P]>>  : never
  } 
    : users
  : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>> : CheckSelect<T, Prisma__usersClient<users | null >, Prisma__usersClient<usersGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<users>>, PrismaPromise<Array<usersGetPayload<T>>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends Keys<MaybeTupleToUnion<T['orderBy']>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    lists<T extends listsFindManyArgs = {}>(args?: Subset<T, listsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<lists>>, PrismaPromise<Array<listsGetPayload<T>>>>;

    todos<T extends todosFindManyArgs = {}>(args?: Subset<T, todosFindManyArgs>): CheckSelect<T, PrismaPromise<Array<todos>>, PrismaPromise<Array<todosGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Throw an Error if a users can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ListsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    title: 'title',
    default: 'default',
    is_deleted: 'is_deleted',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ListsScalarFieldEnum = (typeof ListsScalarFieldEnum)[keyof typeof ListsScalarFieldEnum]


  export const TodosScalarFieldEnum: {
    id: 'id',
    list_id: 'list_id',
    user_id: 'user_id',
    is_deleted: 'is_deleted',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TodosScalarFieldEnum = (typeof TodosScalarFieldEnum)[keyof typeof TodosScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type listsWhereInput = {
    AND?: Enumerable<listsWhereInput>
    OR?: Enumerable<listsWhereInput>
    NOT?: Enumerable<listsWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    title?: StringFilter | string
    default?: BoolFilter | boolean
    is_deleted?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    todos?: TodosListRelationFilter
  }

  export type listsOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    default?: SortOrder
    is_deleted?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type listsWhereUniqueInput = {
    id?: number
  }

  export type listsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<listsScalarWhereWithAggregatesInput>
    OR?: Enumerable<listsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<listsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    title?: StringWithAggregatesFilter | string
    default?: BoolWithAggregatesFilter | boolean
    is_deleted?: BoolWithAggregatesFilter | boolean
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type todosWhereInput = {
    AND?: Enumerable<todosWhereInput>
    OR?: Enumerable<todosWhereInput>
    NOT?: Enumerable<todosWhereInput>
    id?: IntFilter | number
    list_id?: IntFilter | number
    user_id?: IntFilter | number
    is_deleted?: BoolFilter | boolean
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    lists?: XOR<ListsRelationFilter, listsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type todosOrderByInput = {
    id?: SortOrder
    list_id?: SortOrder
    user_id?: SortOrder
    is_deleted?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type todosWhereUniqueInput = {
    id?: number
  }

  export type todosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<todosScalarWhereWithAggregatesInput>
    OR?: Enumerable<todosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<todosScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    list_id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    is_deleted?: BoolWithAggregatesFilter | boolean
    content?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
    lists?: ListsListRelationFilter
    todos?: TodosListRelationFilter
  }

  export type usersOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type listsCreateInput = {
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    users: usersCreateNestedOneWithoutListsInput
    todos?: todosCreateNestedManyWithoutListsInput
  }

  export type listsUncheckedCreateInput = {
    id?: number
    user_id: number
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    todos?: todosUncheckedCreateNestedManyWithoutListsInput
  }

  export type listsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutListsInput
    todos?: todosUpdateManyWithoutListsInput
  }

  export type listsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    todos?: todosUncheckedUpdateManyWithoutListsInput
  }

  export type listsCreateManyInput = {
    id?: number
    user_id: number
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type listsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type listsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type todosCreateInput = {
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
    lists: listsCreateNestedOneWithoutTodosInput
    users: usersCreateNestedOneWithoutTodosInput
  }

  export type todosUncheckedCreateInput = {
    id?: number
    list_id: number
    user_id: number
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type todosUpdateInput = {
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lists?: listsUpdateOneRequiredWithoutTodosInput
    users?: usersUpdateOneRequiredWithoutTodosInput
  }

  export type todosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    list_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type todosCreateManyInput = {
    id?: number
    list_id: number
    user_id: number
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type todosUpdateManyMutationInput = {
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type todosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    list_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    lists?: listsCreateNestedManyWithoutUsersInput
    todos?: todosCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    lists?: listsUncheckedCreateNestedManyWithoutUsersInput
    todos?: todosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lists?: listsUpdateManyWithoutUsersInput
    todos?: todosUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lists?: listsUncheckedUpdateManyWithoutUsersInput
    todos?: todosUncheckedUpdateManyWithoutUsersInput
  }

  export type usersCreateManyInput = {
    id?: number
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type TodosListRelationFilter = {
    every?: todosWhereInput
    some?: todosWhereInput
    none?: todosWhereInput
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    count?: NestedIntFilter
    min?: NestedBoolFilter
    max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type ListsRelationFilter = {
    is?: listsWhereInput
    isNot?: listsWhereInput
  }

  export type ListsListRelationFilter = {
    every?: listsWhereInput
    some?: listsWhereInput
    none?: listsWhereInput
  }

  export type usersCreateNestedOneWithoutListsInput = {
    create?: XOR<usersCreateWithoutListsInput, usersUncheckedCreateWithoutListsInput>
    connectOrCreate?: usersCreateOrConnectWithoutListsInput
    connect?: usersWhereUniqueInput
  }

  export type todosCreateNestedManyWithoutListsInput = {
    create?: XOR<Enumerable<todosCreateWithoutListsInput>, Enumerable<todosUncheckedCreateWithoutListsInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutListsInput>
    createMany?: todosCreateManyListsInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
  }

  export type todosUncheckedCreateNestedManyWithoutListsInput = {
    create?: XOR<Enumerable<todosCreateWithoutListsInput>, Enumerable<todosUncheckedCreateWithoutListsInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutListsInput>
    createMany?: todosCreateManyListsInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneRequiredWithoutListsInput = {
    create?: XOR<usersCreateWithoutListsInput, usersUncheckedCreateWithoutListsInput>
    connectOrCreate?: usersCreateOrConnectWithoutListsInput
    upsert?: usersUpsertWithoutListsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutListsInput, usersUncheckedUpdateWithoutListsInput>
  }

  export type todosUpdateManyWithoutListsInput = {
    create?: XOR<Enumerable<todosCreateWithoutListsInput>, Enumerable<todosUncheckedCreateWithoutListsInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutListsInput>
    upsert?: Enumerable<todosUpsertWithWhereUniqueWithoutListsInput>
    createMany?: todosCreateManyListsInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
    set?: Enumerable<todosWhereUniqueInput>
    disconnect?: Enumerable<todosWhereUniqueInput>
    delete?: Enumerable<todosWhereUniqueInput>
    update?: Enumerable<todosUpdateWithWhereUniqueWithoutListsInput>
    updateMany?: Enumerable<todosUpdateManyWithWhereWithoutListsInput>
    deleteMany?: Enumerable<todosScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type todosUncheckedUpdateManyWithoutListsInput = {
    create?: XOR<Enumerable<todosCreateWithoutListsInput>, Enumerable<todosUncheckedCreateWithoutListsInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutListsInput>
    upsert?: Enumerable<todosUpsertWithWhereUniqueWithoutListsInput>
    createMany?: todosCreateManyListsInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
    set?: Enumerable<todosWhereUniqueInput>
    disconnect?: Enumerable<todosWhereUniqueInput>
    delete?: Enumerable<todosWhereUniqueInput>
    update?: Enumerable<todosUpdateWithWhereUniqueWithoutListsInput>
    updateMany?: Enumerable<todosUpdateManyWithWhereWithoutListsInput>
    deleteMany?: Enumerable<todosScalarWhereInput>
  }

  export type listsCreateNestedOneWithoutTodosInput = {
    create?: XOR<listsCreateWithoutTodosInput, listsUncheckedCreateWithoutTodosInput>
    connectOrCreate?: listsCreateOrConnectWithoutTodosInput
    connect?: listsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutTodosInput = {
    create?: XOR<usersCreateWithoutTodosInput, usersUncheckedCreateWithoutTodosInput>
    connectOrCreate?: usersCreateOrConnectWithoutTodosInput
    connect?: usersWhereUniqueInput
  }

  export type listsUpdateOneRequiredWithoutTodosInput = {
    create?: XOR<listsCreateWithoutTodosInput, listsUncheckedCreateWithoutTodosInput>
    connectOrCreate?: listsCreateOrConnectWithoutTodosInput
    upsert?: listsUpsertWithoutTodosInput
    connect?: listsWhereUniqueInput
    update?: XOR<listsUpdateWithoutTodosInput, listsUncheckedUpdateWithoutTodosInput>
  }

  export type usersUpdateOneRequiredWithoutTodosInput = {
    create?: XOR<usersCreateWithoutTodosInput, usersUncheckedCreateWithoutTodosInput>
    connectOrCreate?: usersCreateOrConnectWithoutTodosInput
    upsert?: usersUpsertWithoutTodosInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutTodosInput, usersUncheckedUpdateWithoutTodosInput>
  }

  export type listsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<listsCreateWithoutUsersInput>, Enumerable<listsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<listsCreateOrConnectWithoutUsersInput>
    createMany?: listsCreateManyUsersInputEnvelope
    connect?: Enumerable<listsWhereUniqueInput>
  }

  export type todosCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<todosCreateWithoutUsersInput>, Enumerable<todosUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutUsersInput>
    createMany?: todosCreateManyUsersInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
  }

  export type listsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<listsCreateWithoutUsersInput>, Enumerable<listsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<listsCreateOrConnectWithoutUsersInput>
    createMany?: listsCreateManyUsersInputEnvelope
    connect?: Enumerable<listsWhereUniqueInput>
  }

  export type todosUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<todosCreateWithoutUsersInput>, Enumerable<todosUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutUsersInput>
    createMany?: todosCreateManyUsersInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
  }

  export type listsUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<listsCreateWithoutUsersInput>, Enumerable<listsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<listsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<listsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: listsCreateManyUsersInputEnvelope
    connect?: Enumerable<listsWhereUniqueInput>
    set?: Enumerable<listsWhereUniqueInput>
    disconnect?: Enumerable<listsWhereUniqueInput>
    delete?: Enumerable<listsWhereUniqueInput>
    update?: Enumerable<listsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<listsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<listsScalarWhereInput>
  }

  export type todosUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<todosCreateWithoutUsersInput>, Enumerable<todosUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<todosUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: todosCreateManyUsersInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
    set?: Enumerable<todosWhereUniqueInput>
    disconnect?: Enumerable<todosWhereUniqueInput>
    delete?: Enumerable<todosWhereUniqueInput>
    update?: Enumerable<todosUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<todosUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<todosScalarWhereInput>
  }

  export type listsUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<listsCreateWithoutUsersInput>, Enumerable<listsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<listsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<listsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: listsCreateManyUsersInputEnvelope
    connect?: Enumerable<listsWhereUniqueInput>
    set?: Enumerable<listsWhereUniqueInput>
    disconnect?: Enumerable<listsWhereUniqueInput>
    delete?: Enumerable<listsWhereUniqueInput>
    update?: Enumerable<listsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<listsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<listsScalarWhereInput>
  }

  export type todosUncheckedUpdateManyWithoutUsersInput = {
    create?: XOR<Enumerable<todosCreateWithoutUsersInput>, Enumerable<todosUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<todosCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<todosUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: todosCreateManyUsersInputEnvelope
    connect?: Enumerable<todosWhereUniqueInput>
    set?: Enumerable<todosWhereUniqueInput>
    disconnect?: Enumerable<todosWhereUniqueInput>
    delete?: Enumerable<todosWhereUniqueInput>
    update?: Enumerable<todosUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<todosUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<todosScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    count?: NestedIntFilter
    avg?: NestedFloatFilter
    sum?: NestedIntFilter
    min?: NestedIntFilter
    max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    count?: NestedIntFilter
    min?: NestedStringFilter
    max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    count?: NestedIntFilter
    min?: NestedBoolFilter
    max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    count?: NestedIntFilter
    min?: NestedDateTimeFilter
    max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    count?: NestedIntNullableFilter
    min?: NestedDateTimeNullableFilter
    max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type usersCreateWithoutListsInput = {
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    todos?: todosCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutListsInput = {
    id?: number
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    todos?: todosUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutListsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutListsInput, usersUncheckedCreateWithoutListsInput>
  }

  export type todosCreateWithoutListsInput = {
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
    users: usersCreateNestedOneWithoutTodosInput
  }

  export type todosUncheckedCreateWithoutListsInput = {
    id?: number
    user_id: number
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type todosCreateOrConnectWithoutListsInput = {
    where: todosWhereUniqueInput
    create: XOR<todosCreateWithoutListsInput, todosUncheckedCreateWithoutListsInput>
  }

  export type todosCreateManyListsInputEnvelope = {
    data: Enumerable<todosCreateManyListsInput>
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutListsInput = {
    update: XOR<usersUpdateWithoutListsInput, usersUncheckedUpdateWithoutListsInput>
    create: XOR<usersCreateWithoutListsInput, usersUncheckedCreateWithoutListsInput>
  }

  export type usersUpdateWithoutListsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    todos?: todosUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    todos?: todosUncheckedUpdateManyWithoutUsersInput
  }

  export type todosUpsertWithWhereUniqueWithoutListsInput = {
    where: todosWhereUniqueInput
    update: XOR<todosUpdateWithoutListsInput, todosUncheckedUpdateWithoutListsInput>
    create: XOR<todosCreateWithoutListsInput, todosUncheckedCreateWithoutListsInput>
  }

  export type todosUpdateWithWhereUniqueWithoutListsInput = {
    where: todosWhereUniqueInput
    data: XOR<todosUpdateWithoutListsInput, todosUncheckedUpdateWithoutListsInput>
  }

  export type todosUpdateManyWithWhereWithoutListsInput = {
    where: todosScalarWhereInput
    data: XOR<todosUpdateManyMutationInput, todosUncheckedUpdateManyWithoutTodosInput>
  }

  export type todosScalarWhereInput = {
    AND?: Enumerable<todosScalarWhereInput>
    OR?: Enumerable<todosScalarWhereInput>
    NOT?: Enumerable<todosScalarWhereInput>
    id?: IntFilter | number
    list_id?: IntFilter | number
    user_id?: IntFilter | number
    is_deleted?: BoolFilter | boolean
    content?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type listsCreateWithoutTodosInput = {
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    users: usersCreateNestedOneWithoutListsInput
  }

  export type listsUncheckedCreateWithoutTodosInput = {
    id?: number
    user_id: number
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type listsCreateOrConnectWithoutTodosInput = {
    where: listsWhereUniqueInput
    create: XOR<listsCreateWithoutTodosInput, listsUncheckedCreateWithoutTodosInput>
  }

  export type usersCreateWithoutTodosInput = {
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    lists?: listsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutTodosInput = {
    id?: number
    email: string
    password: string
    created_at?: Date | string
    updated_at?: Date | string | null
    lists?: listsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutTodosInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTodosInput, usersUncheckedCreateWithoutTodosInput>
  }

  export type listsUpsertWithoutTodosInput = {
    update: XOR<listsUpdateWithoutTodosInput, listsUncheckedUpdateWithoutTodosInput>
    create: XOR<listsCreateWithoutTodosInput, listsUncheckedCreateWithoutTodosInput>
  }

  export type listsUpdateWithoutTodosInput = {
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutListsInput
  }

  export type listsUncheckedUpdateWithoutTodosInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUpsertWithoutTodosInput = {
    update: XOR<usersUpdateWithoutTodosInput, usersUncheckedUpdateWithoutTodosInput>
    create: XOR<usersCreateWithoutTodosInput, usersUncheckedCreateWithoutTodosInput>
  }

  export type usersUpdateWithoutTodosInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lists?: listsUpdateManyWithoutUsersInput
  }

  export type usersUncheckedUpdateWithoutTodosInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lists?: listsUncheckedUpdateManyWithoutUsersInput
  }

  export type listsCreateWithoutUsersInput = {
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    todos?: todosCreateNestedManyWithoutListsInput
  }

  export type listsUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
    todos?: todosUncheckedCreateNestedManyWithoutListsInput
  }

  export type listsCreateOrConnectWithoutUsersInput = {
    where: listsWhereUniqueInput
    create: XOR<listsCreateWithoutUsersInput, listsUncheckedCreateWithoutUsersInput>
  }

  export type listsCreateManyUsersInputEnvelope = {
    data: Enumerable<listsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type todosCreateWithoutUsersInput = {
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
    lists: listsCreateNestedOneWithoutTodosInput
  }

  export type todosUncheckedCreateWithoutUsersInput = {
    id?: number
    list_id: number
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type todosCreateOrConnectWithoutUsersInput = {
    where: todosWhereUniqueInput
    create: XOR<todosCreateWithoutUsersInput, todosUncheckedCreateWithoutUsersInput>
  }

  export type todosCreateManyUsersInputEnvelope = {
    data: Enumerable<todosCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type listsUpsertWithWhereUniqueWithoutUsersInput = {
    where: listsWhereUniqueInput
    update: XOR<listsUpdateWithoutUsersInput, listsUncheckedUpdateWithoutUsersInput>
    create: XOR<listsCreateWithoutUsersInput, listsUncheckedCreateWithoutUsersInput>
  }

  export type listsUpdateWithWhereUniqueWithoutUsersInput = {
    where: listsWhereUniqueInput
    data: XOR<listsUpdateWithoutUsersInput, listsUncheckedUpdateWithoutUsersInput>
  }

  export type listsUpdateManyWithWhereWithoutUsersInput = {
    where: listsScalarWhereInput
    data: XOR<listsUpdateManyMutationInput, listsUncheckedUpdateManyWithoutListsInput>
  }

  export type listsScalarWhereInput = {
    AND?: Enumerable<listsScalarWhereInput>
    OR?: Enumerable<listsScalarWhereInput>
    NOT?: Enumerable<listsScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    title?: StringFilter | string
    default?: BoolFilter | boolean
    is_deleted?: BoolFilter | boolean
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type todosUpsertWithWhereUniqueWithoutUsersInput = {
    where: todosWhereUniqueInput
    update: XOR<todosUpdateWithoutUsersInput, todosUncheckedUpdateWithoutUsersInput>
    create: XOR<todosCreateWithoutUsersInput, todosUncheckedCreateWithoutUsersInput>
  }

  export type todosUpdateWithWhereUniqueWithoutUsersInput = {
    where: todosWhereUniqueInput
    data: XOR<todosUpdateWithoutUsersInput, todosUncheckedUpdateWithoutUsersInput>
  }

  export type todosUpdateManyWithWhereWithoutUsersInput = {
    where: todosScalarWhereInput
    data: XOR<todosUpdateManyMutationInput, todosUncheckedUpdateManyWithoutTodosInput>
  }

  export type todosCreateManyListsInput = {
    id?: number
    user_id: number
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type todosUpdateWithoutListsInput = {
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutTodosInput
  }

  export type todosUncheckedUpdateWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type todosUncheckedUpdateManyWithoutTodosInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type listsCreateManyUsersInput = {
    id?: number
    title: string
    default?: boolean
    is_deleted?: boolean
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type todosCreateManyUsersInput = {
    id?: number
    list_id: number
    is_deleted?: boolean
    content: string
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type listsUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    todos?: todosUpdateManyWithoutListsInput
  }

  export type listsUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    todos?: todosUncheckedUpdateManyWithoutListsInput
  }

  export type listsUncheckedUpdateManyWithoutListsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    default?: BoolFieldUpdateOperationsInput | boolean
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type todosUpdateWithoutUsersInput = {
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lists?: listsUpdateOneRequiredWithoutTodosInput
  }

  export type todosUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    list_id?: IntFieldUpdateOperationsInput | number
    is_deleted?: BoolFieldUpdateOperationsInput | boolean
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}